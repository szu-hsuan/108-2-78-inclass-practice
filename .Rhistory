committer = list(
name="emilyluckey",
email="emily007@gmail.com",
time= ymd_hms("2020-03-26T08:18:40Z")
),
message = c("update")
)
print(commit)
commit <- list(
author = list(
name="Martin老師",
email="mtlin@gm.ntpu.edu.tw",
time= ymd_hms("2020-03-25T07:17:40Z")
),
committer = list(
name="emilyluckey",
email="emily007@gmail.com",
time= ymd_hms("2020-03-26T08:18:40Z")
),
message = c("update")
)
print(commit)
browseURL("https://api.github.com/repos/tpemartin/108-2-56-inclass-practice/commits")
commit <- list(
author1= c("Martin老師",
"mtlin@gm.ntpu.edu.tw",
"2020-03-25T07:17:40Z"),
author2= list(
"Martin老師",
"mtlin@gm.ntpu.edu.tw",
ymd_hms("2020-03-25T07:17:40Z")), #better
commiter = list(
"emilyluckey",
"emily007@gmail.com",
ymd_hms("2020-03-26T08:18:40Z"
),
message = c("update") # ="update"
)
)
print(commit)
# commiter = ,
# message =
knitr::opts_chunk$set(echo = TRUE)
vectorExample <- c(2,6,7)
listExample <- list(2,6,7)
print(vectorExample)
print(listExample)
#用vector儲存
c("2020-03-31T13:40:55Z",
"一芳",
"2",
"水果茶")
#用list儲存
library(lubridate)
list(
ymd_hms("2020-03-31T13:40:55Z"), # Date/time
"一芳", # Character
2, # Numeric 不用雙引號
"水果茶" #Character
)
library(lubridate)
`小明交易1` <- list(
ymd_hms("2020-03-31T13:40:55Z"), # Date/Time class
"一芳", # character
2, # numeric
"水果茶" # character
)
print(`小明交易1`)
# 用vector
c(
c("108學年第1學期","高級會計學","高等統計學"), #向量1
c("108學年第2學期","食在拉丁美洲") #向量2
)
# 用list
list(
c("108學年第1學期","高級會計學","高等統計學"), #向量1
c("108學年第2學期","食在拉丁美洲") #向量2
)
# list含兩個vectors
`小明108學年課表A` <- list(
c("108-1","高級會計學","高等統計學"),
c("108-2","食在拉丁美洲")
)
print(`小明108學年課表A`)
# list含兩個lists
`小明108學年課表B` <- list(
list("108-1","高級會計學","高等統計學"),
list("108-2","食在拉丁美洲")
)
print(`小明108學年課表B`)
# list含兩個lists list with list = neeted list
`小明108學年課表C` <- list(
list(
c("108-1"),
c("高級會計學","高等統計學")
),
list(
c("108-2"),
c("食在拉丁美洲")
)
)
print(`小明108學年課表C`)
# list含兩個lists, 子層list又各含兩個vectors
`小明108學年課表C` <- list(
list(
c("108-1"), # 可只寫 "108-1"
c("高級會計學","高等統計學")
),
list(
c("108-2"),
c("食在拉丁美洲")
)
)
print(`小明108學年課表C`)
`小明108學年課表D` <- list(
list(
semester=c("108-1"), # 可只寫 "108-1"
courses=c("高級會計學","高等統計學")
),
list(
semester=c("108-2"),
courses=c("食在拉丁美洲")
)
)
print(`小明108學年課表D`)
`小明108學年課表D` <- list(
`上學期`=list(
semester=c("108-1"), # 可只寫 "108-1"
courses=c("高級會計學","高等統計學")
),
`下學期`=list(
semester=c("108-2"),
courses=c("食在拉丁美洲")
)
)
print(`小明108學年課表D`)
commit <- list(
author1= c("Martin老師", ##??
"mtlin@gm.ntpu.edu.tw",
"2020-03-25T07:17:40Z"),
author2= list(
"Martin老師",
"mtlin@gm.ntpu.edu.tw",
ymd_hms("2020-03-25T07:17:40Z")), #better
commiter = list(
"emilyluckey",
"emily007@gmail.com",
ymd_hms("2020-03-26T08:18:40Z"
),
message = c("update") # ="update"
)
)
print(commit)
# commiter = ,
# message =
library(jsonlite) # 不少同學這行會有Error，還記得如何排除嗎？
toJSON(commit)
# 108-1
course1_1081 <-
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
course2_1081 <-
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
`108-1修課記錄` <-
list(
course1_1081,
course2_1081
)
# 108-2
course1_1082 <-
list(
name="作業研究",
teacher="Jason",
grade=90
)
`108-2修課記錄` <-
list(
course1_1082
)
# 整合兩學期
`每學期修課記錄` <- list(
`108-1`=`108-1修課記錄`,
`108-2`=`108-2修課記錄`
)
# 完成記錄
`小明的修課記錄` <-
list(
name="小明",
semesters=`每學期修課記錄`
)
library(jsonlite)
fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
View(weather_next36hours)
save(commit,listExample,`小明108學年課表D`,file = "0401.Rda")
load("0401.Rda")
View(小明108學年課表D)
knitr::opts_chunk$set(echo = TRUE)
vectorExample <- c("小明","小英","大雄")
# 有多少位置可選：
length(vectorExample)
vectorExample[[1]]
vectorExample[[3]]
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
# 有多少位置可選：
length(listExample)
View(listExample)
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
# 有多少位置可選：
length(listExample)
listExample[[1]]
listExample[[2]]
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
length(tainanSportsMap)
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
length(tainanSportsMap)
tainanSportsMap[[1]]
tainanSportsMap[[1076]]
tainanSportsMap[[1]]
tainanSportsMap[[1076]]
tainanSportsMap[[1076]]
# 有多少名字可以選
names(listExample)
listExample$student
listExample$`學期` #特殊命名要用反頓點
listExample$student
listExample$`學期` #特殊命名要用反頓點
listExample$student
listExample$`學期` #特殊命名要用反頓點
listExample$student
listExample$`學期` #特殊命名要用反頓點
listExample$student
listExample$`學期` #特殊命名要用反頓點
listExample$`學期` #特殊命名要用反頓點
listExample$student
listExample$`學期` #特殊命名要用反頓點
str(listExample)
str(listExample$學期)
listExample[["student"]]
listExample$student
listExample[["學期"]] # 小心不是反頓點喔。
listExample$`學期`
listExample[[student]]
student <- "student"
listExample[[student]]
fromJSON("http://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000157-002",
simplifyDataFrame = F) -> newTaipeiCityVaccine
str(newTaipeiCityVaccine)
length(newTaipeiCityVaccine)
names(newTaipeiCityVaccine)
newTaipeiCityVaccine$success
newTaipeiCityVaccine[[1]]
str(newTaipeiCityVaccine[[1]])
str(newTaipeiCityVaccine$success)
str(newTaipeiCityVaccine[["success"]])
str(newTaipeiCityVaccine[[1]])
str(newTaipeiCityVaccine$success)
str(newTaipeiCityVaccine[["success"]])
str(newTaipeiCityVaccine[[2]])
str(newTaipeiCityVaccine$result)
str(newTaipeiCityVaccine[["result"]])
str(newTaipeiCityVaccine[[2]])
str(newTaipeiCityVaccine$result)
str(newTaipeiCityVaccine[["result"]])
str(newTaipeiCityVaccine[[2]],max.level = 1)
str(newTaipeiCityVaccine$result)
str(newTaipeiCityVaccine[["result"]])
str(newTaipeiCityVaccine[[2]],max.level = 1)
str(newTaipeiCityVaccine[[2]],max.level = 1)
str(newTaipeiCityVaccine$result,max.level = 1)
str(newTaipeiCityVaccine[["result"]],max.level = 1)
# 顯示到第一層
str(listExample, max.level=1)
listExample[c("學期")]
listExample[c("student","學期")]
# 顯示到第一層
str(listExample, max.level=1)
listExample[c("學期")] # 不建議
listExample[c("student","學期")]
listExample[c("學期","student")]
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
View(taipeiNightMarkets)
taipeiNightMarkets[[c("南機場夜市","士林觀光夜市"]]
taipeiNightMarkets[c("南機場夜市","士林觀光夜市"]
taipeiNightMarkets[c("南機場夜市","士林觀光夜市"）]
taipeiNightMarkets[c("南機場夜市","士林觀光夜市")]
taipeiNightMarkets[c("南機場夜市","士林觀光夜市", max.level =1)]
vectorExample
vectorExample[c(T,T,F)] # 要，要，不要
str(listExample[c(F,T)]) # 不要，要
str(listExample[c(T,T)]) # 要，要
listExample[c("學期")]
str(listExample[c(F,T)]) # 不要，要
str(listExample)
str(listExample[c(F,T)]) # 不要，要
str(listExample[c("學期")])
str(listExample[c(T,T)]) # 要，要
str(listExample)
str(listExample[c(F,T)]) # 不要，要
str(listExample[c("學期")])
str(listExample[c(T,T)]) # 要，要
names(taipeiNightMarkets)
c(T,F,F,
F,T,F,
F,F,F,
T,F,F
F,T)
str(taipeiNightMarkets[c(T,F,F,
F,T,F,
F,F,F,
T,F,F
F,T)])
str(taipeiNightMarkets[c(T,F,F,
F,T,F,
F,F,F,
T,F,F,
F,T)])
c(T,F,F,
F,T,F,
F,F,F,
T,F,F,
F,T) -> selectedMarkets
c(T,F,F,
F,T,F,
F,F,F,
T,F,F,
F,T) -> selectedMarkets
str(selectedMarkets)
c(T,F,F,
F,T,F,
F,F,F,
T,F,F,
F,T) -> selectedMarkets
taipeiNightMarkets(selectedMarkets)
c(T,F,F,
F,T,F,
F,F,F,
T,F,F,
F,T) -> selectedMarkets
taipeiNightMarkets(
c(T,F,F,
F,T,F,
F,F,F,
T,F,F,
F,T) )
c(T,F,F,
F,T,F,
F,F,F,
T,F,F,
F,T) -> selectedMarkets
taipeiNightMarkets[
c(T,F,F,
F,T,F,
F,F,F,
T,F,F,
F,T) ]
c(T,F,F,
F,T,F,
F,F,F,
T,F,F,
F,T) -> selectedMarkets
str(taipeiNightMarkets[
c(T,F,F,
F,T,F,
F,F,F,
T,F,F,
F,T) ,max.level =1])
c(T,F,F,
F,T,F,
F,F,F,
T,F,F,
F,T) -> selectedMarkets
str(taipeiNightMarkets[
c(T,F,F,
F,T,F,
F,F,F,
T,F,F,
F,T ,max.level =1)])
c(T,F,F,
F,T,F,
F,F,F,
T,F,F,
F,T) -> selectedMarkets
str(taipeiNightMarkets[
c(T,F,F,
F,T,F,
F,F,F,
T,F,F,
F,T)] ,max.level =1)
c(T,F,F,
F,T,F,
F,F,F,
T,F,F,
F,T) -> selectedMarkets
str(taipeiNightMarkets[
c(T,F,F,
F,T,F,
F,F,F,
T,F,F,
F,T)] ,max.level =1)
taipeiNightMarkets[selectedMarkets]
rep(F,14) # repeat
selectedMarkets <- rep(F,14) # repeat
selectedMarkets <- rep(F,14) # repeat
selectedMarkets <- rep(F,14) # repeat
print(selectedMarkets)
selectedMarkets[c(1,5,10,14)]
selectedMarkets <- rep(F,14) # repeat
print(selectedMarkets)
selectedMarkets[c(1,5,10,14)] <- TRUE
selectedMarkets <- rep(F,14) # repeat
print(selectedMarkets)
selectedMarkets[c(1,5,10,14)] <- TRUE
selectedMarkets[c(1,5,10,14)] <- TRUE #replacement
selectedMarkets[c(1,5,10,14)] <- TRUE #replacement
selectedMarkets <- rep(F,14) # repeat
print(selectedMarkets)
selectedMarkets[c(1,5,10,14)] <- TRUE #replacement(R:generic)
print(selectedMarkets)
str(taipeiNightMarkets[selectedMarkets])
str(taipeiNightMarkets[selectedMarkets],max.level = 1)
str(listExample)
str(listExample,max.level = 1)
str(listExample,max.level = 3)
get1 <- listExample[["學期"]]
get2 <- listExample["學期"]
#[[]]: 拿出某個物件值。listExample[["學期"]]將listExample裡的“學期”物件值拿出來。
get1 <- listExample[["學期"]]
str(listExample,max.level = 3)
get2 <- listExample["學期"]
#[[]]: 拿出某個物件值。listExample[["學期"]]將listExample裡的“學期”物件值拿出來。
get1 # 學期拿出來，有3個元素的list
str(listExample,max.level = 3)
str(get1)
get1 <- listExample[["學期"]]
str(get1)
get1 <- listExample[["學期"]]
str(get1,max.level = 1)
get1 # 學期拿出來，有3個元素的list
str(listExample,max.level = 3)
get1 # 學期拿出來，有3個元素的list
str(listExample,max.level = 3)
str(listExample,max.level = 3)
get1 # 學期拿出來，有3個元素的list
str(listExample,max.level = 3)
#get1 # 學期拿出來，有3個元素的list
str(listExample,max.level = 3)
get2 <- listExample["學期"] # listExample 只留下 學期元素，是個只有一個元素的list
str(get2,max.level = 1)
str(get2,max.level = 2)
str(get1,max.level = 1)
numVector <- c(2,3,6,-1,4,2,6)
select1 <- numVector[c(1,4)]; select1
select2 <- select1[[1]]; select2
# 相當於
numVector[c(1,4)][[1]]
select1 <- numVector[c(1,4)]
select1
select2 <- select1[[1]]; select2
select1 <- numVector[c(T,T,F,T,F,F,T)]; select1
select2 <- select1[c(1,4)]; select2
select1 <- numVector[c(T,T,F,T,F,F,T)]; select1
select2 <- select1[c(1,4)]; select2
