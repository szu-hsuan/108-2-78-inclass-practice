---
title: "0401課堂"
author: "吳思璇"
date: "4/1/2020"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## 3.6 list

```{r}
vectorExample <- c(2,6,7)
listExample <- list(2,6,7)

print(vectorExample)
print(listExample)
```

每個元素值可以是不同type的物件值。
```{r}
#用vector儲存
c("2020-03-31T13:40:55Z",
  "一芳",
  "2",
  "水果茶")

#用list儲存
library(lubridate)
list(
  ymd_hms("2020-03-31T13:40:55Z"), # Date/time
  "一芳", # Character
  2, # Numeric 不用雙引號
  "水果茶" #Character
)
```
```{r}
library(lubridate)
`小明交易1` <- list(
  ymd_hms("2020-03-31T13:40:55Z"), # Date/Time class
  "一芳", # character
  2, # numeric
  "水果茶" # character
)
print(`小明交易1`)
```
物件值可以是vector形式，也可以list
```{r}
# 用vector
c(
  c("108學年第1學期","高級會計學","高等統計學"), #向量1
  c("108學年第2學期","食在拉丁美洲") #向量2
)
```
```{r}
# 用list
list(
  c("108學年第1學期","高級會計學","高等統計學"), #向量1
  c("108學年第2學期","食在拉丁美洲") #向量2
)
```
```{r}
# list含兩個vectors
`小明108學年課表A` <- list(
  c("108-1","高級會計學","高等統計學"),
  c("108-2","食在拉丁美洲")
)
print(`小明108學年課表A`)
```
```{r}
# list含兩個lists
`小明108學年課表B` <- list(
  list("108-1","高級會計學","高等統計學"),
  list("108-2","食在拉丁美洲")
)
print(`小明108學年課表B`)
```
```{r}
# list含兩個lists list with list = neeted list
`小明108學年課表C` <- list(
  list(
    c("108-1"),
    c("高級會計學","高等統計學")
    ),
  list(
    c("108-2"),
    c("食在拉丁美洲")
)
)
print(`小明108學年課表C`)
```

```{r}
# list含兩個lists, 子層list又各含兩個vectors
`小明108學年課表C` <- list(
  list(
    c("108-1"), # 可只寫 "108-1"
    c("高級會計學","高等統計學")
       ),
  list(
    c("108-2"),
    c("食在拉丁美洲")
  )
)
print(`小明108學年課表C`)
```
物件值可以取名。
```{r}
`小明108學年課表D` <- list(
  list(
    semester=c("108-1"), # 可只寫 "108-1"
    courses=c("高級會計學","高等統計學")
       ),
  list(
    semester=c("108-2"),
    courses=c("食在拉丁美洲")
  )
)
print(`小明108學年課表D`)
```

```{r}
`小明108學年課表D` <- list(
  `上學期`=list(
    semester=c("108-1"), # 可只寫 "108-1"
    courses=c("高級會計學","高等統計學")
       ),
  `下學期`=list(
    semester=c("108-2"),
    courses=c("食在拉丁美洲")
  )
)
print(`小明108學年課表D`)
```
```{r}
commit <- list(
  author1= c("Martin老師", ##??
             "mtlin@gm.ntpu.edu.tw",
             "2020-03-25T07:17:40Z"),
  author2= list(
    "Martin老師",
    "mtlin@gm.ntpu.edu.tw",
    ymd_hms("2020-03-25T07:17:40Z")), #better
  commiter = list(
    "emilyluckey",
    "emily007@gmail.com",
    ymd_hms("2020-03-26T08:18:40Z"
),
message = c("update") # ="update"
)
  )
print(commit)
 # commiter = ,
 # message = 

```
```{r}
commit <- list(
  author = list(
  name="Martin老師", 
  email="mtlin@gm.ntpu.edu.tw", 
  time= ymd_hms("2020-03-25T07:17:40Z")
  ),
  committer = list(
  name="emilyluckey",
  email="emily007@gmail.com",
  time= ymd_hms("2020-03-26T08:18:40Z")
),
  message = c("update")
)
print(commit)
```
```{r}
browseURL("https://api.github.com/repos/tpemartin/108-2-56-inclass-practice/commits") 
```

```{r}
library(jsonlite) # 不少同學這行會有Error，還記得如何排除嗎？
toJSON(commit)
```
#學生小明，在108學年第1學期修了Alice老師所授的個體經濟學（得分85分）、Mark老師所授的總體經濟學(得分73分)。在108學年第2學期修了Jason老師所授的作業研究（得分90分）。
```{r}
# 108-1 
course1_1081 <- 
  list(
    name="個體經濟學",
    teacher="Alice",
    grade=85
  )
course2_1081 <-
  list(
    name="總體經濟學",
    teacher="Mark",
    grade=78
  )
`108-1修課記錄` <- 
  list(
    course1_1081,
    course2_1081
  )

# 108-2
course1_1082 <- 
  list(
    name="作業研究",
    teacher="Jason",
    grade=90
  )
`108-2修課記錄` <- 
  list(
    course1_1082
  )

# 整合兩學期
`每學期修課記錄` <- list(
  `108-1`=`108-1修課記錄`,
  `108-2`=`108-2修課記錄`
)

# 完成記錄
`小明的修課記錄` <- 
  list(
    name="小明",
    semesters=`每學期修課記錄`
  )
```

```{r}
`小明的修課記錄` <- 
  list(
    name="小明",
    semesters=
      list(
        `108-1`=
          list(
            year=108,
            semester=1,
            courses=
              list(
                list(
                  name="個體經濟學",
                  teacher="Alice",
                  grade=85
                ),
                list(
                  name="總體經濟學",
                  teacher="Mark",
                  grade=78
                )
              )
            ),
        `108-2`=
          list(
            year=108,
            semester=2,
            courses=
              list(
                list(
                  name="作業研究",
                  teacher="Jason",
                  grade=90
                )
              )
            )
      ) 
    )
```

# 今（“2020-03-31”）明（“2020-04-01”）「台北市」氣溫最高25度，最低18度；「新北市」氣溫最高24度，最低15度
#XX
```{r}
temperature1 <- list(
  date= ymd("2020-03-31"),
  location = "Taipei",
  highest = "25",
  lowest = "18")

temperature2 <- list(
  date= ymd("2020-03-31"),
  location = "NewTaipei",
  highest = "24",
  lowest = "15")
```

#answer
```{r}
#氣象預報
weather_taipei<-
  list(
    date=list("2020-03-31",("2020-04-01")),
    city="台北市",
    temp_highest=25,
    temp_lowest=18
  )

weather_newtaipei<-
  list(
    date=list(("2020-03-31"),("2020-04-01")),
    city="新北市",
    temp_highest=24,
    temp_lowest=15
  )
weather<-list(weather_taipei,weather_newtaipei)
print(weather)
```

詳解
```{r}
從底部開始架起
`台北市預報元素值` <- 
  list(
    city="台北市",
    high=25,
    low=18
  )
`新北市預報元素值` <- 
  list(
    city="新北市",
    high=24,
    low=15
  )

`各地預報元素值` <-
  list(
    `台北市預報`=`台北市預報元素值`,
    `新北市預報`=`新北市預報元素值`
  )

library(lubridate)
`今明天氣` <-
  list(
    `今天日期`=ymd("2020-03-31"),
    `明天天氣`=ymd("2020-04-01"),
    `各地預報`=`各地預報元素值`
  )
```
大家參考看看。
如果資料結構太複雜，先畫個圖，然後從最底層寫上來。
list產生後，在Environment點放大鏡看一下它的層層架構是否合理。

```{r}
#氣象預報
weather_taipei<-
  list(
    date=list("2020-03-31","2020-04-01"),
    city="台北市",
    temp_highest=25,
    temp_lowest=18
  )

weather_newtaipei<-
  list(
    date=list("2020-03-31","2020-04-01"),
    city="新北市",
    temp_highest=24,
    temp_lowest=15
  )
weather<-list(weather_taipei,weather_newtaipei)
print(weather)
```

 #一般天氣預報-今明36小時天氣預報:
```{r}
library(jsonlite)
fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
  weather_next36hours
```

## 3.7
```{r}
save(commit,listExample,`小明108學年課表D`,file = "0401.Rda")
```

```{r}
load("0401.Rda")
```

#課後練習
Ｑ1

考大家個經學得如何。囚犯兩難賽局架構用list 記錄。
只要能形容上面的局面就好，並不需要求解。
以下是經濟學家對game的定義： A game involves three components:

A list of players
Moves each player can make (strategies)
A listing of payoffs, or benefits, for each player on each eventual outcome (a utility function for outcomes)
你們能不能表達出這個定義的list結構呢？

Answer1
```{r}
Prisoners_dillemma=list(
  players_of_the_game=list(
    name1="A",
    name2="B"),
  each_players_strategy=list(
    A=list(
      strategy1="stay_silent",
      strategy2="betray"),
    B_strategy=list(
      strategy1="stay_silent",
      strategy2="betray")),
  eventual_outcome=list(
    `A:strategy1`=list(
      `B:strategy1`=list(Aconsequence=c(-1),Bconsequence=c(-1)),
      `B:strategy2`=list(Aconsequence=-3,Bconsequence=0)),
    `A:strategy2`=list(
      `B:strategy1`=list(Aconsequence=0,Bconsequence=-3),
      `B:strategy2`=list(Aconsequence=-2,Bconsequence=-2))
    )
)

Prisoners_dillemma$each_players_strategy$A$strategy1 # 查A的strategy1
Prisoners_dillemma$each_players_strategy$A$strategy2
Prisoners_dillemma$each_players_strategy$B$strategy1
Prisoners_dillemma$each_players_strategy$B$strategy2

Prisoners_dillemma$eventual_outcome$`A:strategy1`$`B:strategy2` # `A:strategy1`$`B:strategy2`下的payoff
```
模板
```{r}
game=list(
  players=list(
    player1="A",
    player2="B"
  ),
  strategies=list(
    player1=list(
      strategy1="stay_silent",
      strategy2="betray"
    ),
    player2=list(
      strategy1="stay_silent",
      strategy2="betray"
    )
  ),
  `payoffs: (player1, player2)`=list(
    # mapping from all possible player1 strategy vs player2 strategy
    player1=list(
      strategy1=list(
        player2=list(
          strategy1=c(-1,-1),
          strategy2=c(-3,0)
        )
      ),
      strategy2=list(
        player2=list(
          strategy1=c(0,-3),
          strategy2=c(-2,-1)
        )
      )
    )
  )
)

# 查詢strategies
game$strategies$player1$strategy1
game$strategies$player2$strategy2

# 查詢payoffs
## player1:strategy1, player2:strategy2
game$`payoffs: (player1, player2)`$player1$strategy1$player2$strategy2
## player1:strategy2, player2:strategy2
game$`payoffs: (player1, player2)`$player1$strategy2$player2$strategy2
```

Q2
幾乎人的資訊都可以用list 保留。試看看： 小明於2020-04-01在他的臉書發了「是在哈囉」一文，他的好友在2020-04-02在該文按讚，同時分享到自己臉書
這個資訊要怎麼留下來。
如果大家可以把生活上的資訊都很自在的寫成list ，那以後你們一定會懂Google, Facebook的資訊。
努力挑戰自己list化你一天的日記。

emilyluckey @emilyluckey Apr 01 16:01
一個例子讓大家思考~一樣是自我介紹的list，你會想怎麼分層?

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
